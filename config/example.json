{
  // S4QS-RS will start a HTTP server at this port, with the route /check
  // which returns the string OK. Omit to disable.
  "HTTPPort": 9999,
  // SQS poller options. 
  // Optional.
  "SQS": {
    "poller": {
      // repeat the poll this many times when fetching new messages from SQS.
      // Optional, defaults to 1.
      "repeatPoll": 5
    },
    // SQS region.
    // Required.
    "region": "us-east-1",
    // parameters to pass to SQS. See http://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/SQS.html.
    // Required.
    "params": {
      "QueueUrl": "https://sqs.us-east-1.amazonaws.com/123456789/some-queue-name",
      "WaitTimeSeconds": 20,
      "MaxNumberOfMessages": 10
    }
  },

  "S3Copier": {
    // AWS Redshift options.
    // Required.
    "Redshift": {
      // if the Redshift cluster's status is anything but "available", try checking its status at intervals
      // of clusterAvailCheckInterval seconds until it's back up. Set this to -1 to bail out if the cluster
      // becomes unavailable.
      // Optional. Defaults to -1.
      "clusterAvailCheckInterval": 300,
      // Redshift connection string.
      // Required.
      "connStr": "postgres://username:password@example.com:5439/schema",
      // cluster region.
      // Required.
      "region": "us-east-1",
      // bound parameters. ClusterIdentifier is required, others are optional
      "params": {
        // cluster ID.
        // Required.
        "ClusterIdentifier": "mycluster"
      }
    },
    // AWS S3 constructor options, used by the manifest uploader.
    // Required. ACL must be defined here, other parameters are optional.
    "S3": {
      "params": {
        "ACL": "bucket-owner-full-control"
      }
    },
    // Manifest uploader options.
    // Required.
    "manifestUploader": {
      // Minimum number of URIs to have in each manifest (see maxWaitSeconds)
      // Required.
      "minToUpload": 25,
      // Upload manifest at intervals of maxWaitSeconds seconds, regardless of amount of messages in them.
      // Required.
      "maxWaitSeconds": 600,
      // Value of "mandatory" property of manifest items.
      // Required.
      "mandatory": true,
      // Bucket to upload manifests to.
      // Required.
      "bucket": "manifest-bucket",
      // Prefix for manifest keys.
      // Required.
      "prefix": "s4qs/manifests/"
    },
    // LRU cache options. Used for message deduplication.
    // Optional. See https://github.com/isaacs/node-lru-cache for possible options.
    "LRU": {
      "max": 1000
    },
    // how often to poll for new messages from SQS.
    // Required.
    "pollIntervalSeconds": 300,
    // this will be added to the end of the table name when doing COPYs.
    // Useful for having different tables for different NODE_ENVs.
    // Optional.
    "tablePostfix": "_devel",

    // parameters for Redshift's COPY query.
    // Required.
    "copyParams": {
      // Redshift schema to use
      "schema": "myschema",
      /* 
       the "table" property is used to set the Redshift table name. This can be either a string
       like "my_table_name" or a regular expression (which must start and end with a /).
       The regular expression is given an S3 URI (s3://bucket-name/some/key), and the first capture group 
       will be used as the table name.

       When using a regex, periods in the S3 URI are converted to underscores but that's it.
       Feed it weird URIs and weird stuff will probably happen. You have been warned.

       The example regex and tablePostfix combination would turn an URI like
       s3://bucketname/whatevs/this.will.be.the.table.name/qwerasdf.csv.gz
       to this_will_be_the_table_name_devel.

       If you use Javascript configuration files, you can specify a function
       for "table". The function must take an S3 URI and output a valid
       Redshift table name.
       */
      "table": "/s3:\/\/.*?\/whatevs\/(.*?)\//i",
      // parameterless arguments to COPY. See http://docs.aws.amazon.com/redshift/latest/dg/r_COPY.html.
      // Optional.
      "args": [
        "GZIP",
        "TRUNCATECOLUMNS"
      ],
      // parameters with arguments to COPY. 
      // Boolean arguments can be either true/false, "true"/"false" or "on"/"off".
      // Technically optional, although you'll probably want some.
      "withParams": {
        "DELIMITER": "\\t",
        "REGION": "us-east-1",
        "MAXERROR": 100,
        "NULL": "null",
        "TIMEFORMAT": "auto"
      }
    },
    /* 
     S4QS-RS copies data into time series tables with a configurable time period.
     A UNION ALL + SELECT view of the time series tables is created, and it is updated every time a new time
     series table is created. A configurable amount of old tables are retained, and old tables are dropped 
     when needed.

     The keys of timeSeries should match table names produced by copyParams.table. The keys are used to match 
     time series table configuration to incoming S3 files.

     See e.g. http://docs.aws.amazon.com/redshift/latest/dg/vacuum-time-series-tables.html for more information
     on the concept.

     Required. Sub-object properties are required unless otherwise noted.
     */
    "timeSeries": {
      // time series table configuration for the table some_table_name (extracted from S3 URI by regex in the
      // "table" property above)
      "some_table_name": {
        // Time series table period in seconds. A value of e.g. 86400 would mean that a new time series table is 
        // created per every day
        "period": 86400,
        // Keep a maximum of maxTables time series tables. Oldest tables will be deleted first
        "maxTables": 30,
        // How many tables to have in the rolling view.
        // Optional. Will default to maxTables if omitted.
        "tablesInView": 25,
        // if this is set, use table name + this postfix to create a view that always points to the latest time 
        // series table. 
        // Optional.
        "latestPostfix": "_latest",
        // Array of column definitions
        "columns": ["SOURCE INT NOT NULL ENCODE BYTEDICT",  "ID CHAR(24) ENCODE LZO DISTKEY", "..."],
        // Array of table attributes
        "tableAttrs": ["DISTKEY(ID)", "SORTKEY(ID)"]
      },
      "other_table_name": {
        "period": 86400,
        "maxTables": 30,
        "latestPostfix": "_latest",
        "columns": ["AHOY INT NOT NULL ENCODE LZO",  "DERR INT ENCODE DELTA DISTKEY", "..."],
        "tableAttrs": ["DISTKEY(AHOY)", "SORTKEY(DERR)"]
      }
    }
  }
}